// Generated using webpack-cli https://github.com/webpack/webpack-cli

const path = require("path");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const webpack = require("webpack");

const pkg = require("../../package.json");

const banner = () => {
  return `
  Generated on ${new Date().toISOString()}
  Description: ${pkg.description}
  Package: ${pkg.name}
  Version: v${pkg.version}
  License: ${pkg.license}
  Notice: 
    Do NOT edit this file below this point, any changes will be overwritten.
   `;
};

const isProduction = process.env.NODE_ENV === "production";

const config = {
  entry: path.resolve(__dirname, "./src/index.tsx"),
  output: {
    path: path.resolve(__dirname, "../../out-view"),
    clean: true,
  },
  plugins: [
    new MiniCssExtractPlugin(),
    new webpack.BannerPlugin({
      banner,
    }),
  ],
  module: {
    rules: [
      {
        test: /\.(ts|tsx)$/i,
        loader: "ts-loader",
        exclude: ["/node_modules/"],
      },
      {
        test: /\.s[ac]ss$/i,
        use: [
          // Creates `style` nodes from JS strings
          MiniCssExtractPlugin.loader,
          // Translates CSS into CommonJS
          "css-loader",
          // Compiles Sass to CSS
          "sass-loader",
        ],
      },
      {
        test: /\.css$/i,
        use: [
          // Creates `style` nodes from JS strings
          MiniCssExtractPlugin.loader,
          // Translates CSS into CommonJS
          "css-loader",
        ],
      },
    ],
  },
  resolve: {
    extensions: [".tsx", ".ts", ".js"],
  },
  // TODO: external
  // externals: {
  //   react: "React",
  //   "react-dom": "ReactDOM",
  // },
};

module.exports = () => {
  if (isProduction) {
    config.mode = "production";
  } else {
    config.mode = "development";
    config.devtool = "inline-source-map";
  }
  return config;
};
